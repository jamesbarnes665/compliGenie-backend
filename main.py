from fastapi import FastAPI, UploadFile, File, HTTPException
from fastapi.middleware.cors import CORSMiddleware
from fastapi.responses import FileResponse, JSONResponse
from pydantic import BaseModel
from langchain_openai import ChatOpenAI
from langchain_community.document_loaders import (
    PyPDFLoader,
    TextLoader,
    UnstructuredWordDocumentLoader
)
from reportlab.pdfgen import canvas
import os
import shutil
import uuid

# ========== Init App ==========
app = FastAPI()

# ========== CORS Config ==========
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],  # Update this in production
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# ========== Upload Config ==========
UPLOAD_DIR = "uploaded_files"
os.makedirs(UPLOAD_DIR, exist_ok=True)

# ========== Pydantic Model ==========
class PolicyInput(BaseModel):
    industry: str
    company_size: int
    ai_use_case: str
    compliance_target: str

# ========== Root Route ==========
@app.get("/")
def root():
    return JSONResponse(content={"status": "CompliGenie backend is live."})

# ========== Upload Endpoint ==========
@app.post("/upload")
async def upload_file(file: UploadFile = File(...)):
    try:
        file_path = os.path.join(UPLOAD_DIR, file.filename)
        with open(file_path, "wb") as buffer:
            shutil.copyfileobj(file.file, buffer)

        ext = file.filename.lower().split(".")[-1]

        if ext == "pdf":
            loader = PyPDFLoader(file_path)
        elif ext == "docx":
            loader = UnstructuredWordDocumentLoader(file_path)
        elif ext == "txt":
            loader = TextLoader(file_path)
        else:
            return {"error": f"Unsupported file type: .{ext}"}

        documents = loader.load()
        full_text = "\n\n".join([doc.page_content for doc in documents])

        return {
            "message": "Parsed successfully",
            "filename": file.filename,
            "content": full_text
        }

    except Exception as e:
        return {"error": str(e)}

# ========== Generate Policy Endpoint ==========
@app.post("/generate")
async def generate_policy(input: PolicyInput):
    try:
        # Create output dir if not exist
        output_dir = "output"
        os.makedirs(output_dir, exist_ok=True)

        filename = f"policy_{uuid.uuid4().hex[:8]}.pdf"
        filepath = os.path.join(output_dir, filename)

        # Generate basic policy content (for demo)
        content = (
            f"Policy for {input.industry} Industry\n\n"
            f"Company Size: {input.company_size}\n"
            f"AI Use Case: {input.ai_use_case}\n"
            f"Compliance Target: {input.compliance_target}\n\n"
            f"Generated by CompliGenie"
        )

        # Generate PDF
        c = canvas.Canvas(filepath)
        for i, line in enumerate(content.split("\n")):
            c.drawString(50, 800 - i * 20, line)
        c.save()

        return FileResponse(
            filepath,
            media_type="application/pdf",
            filename=filename
        )

    except Exception as e:
        raise HTTPException(status_code=500, detail=f"Failed to generate policy: {str(e)}")
