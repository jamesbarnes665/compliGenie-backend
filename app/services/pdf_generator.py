# compligenie-backend/app/services/pdf_generator.py

from typing import Dict, Any, Optional
import base64
from datetime import datetime
from app.models.partner import PartnerBranding

class PDFGenerator:
    """PDF generator with white-label support"""
    
    def __init__(self):
        self.default_branding = {
            "company_name": "CompliGenie",
            "primary_color": "#1a365d",
            "secondary_color": "#2563eb",
            "logo_url": "https://compligenie.com/logo.png",
            "footer_text": "Generated by CompliGenie - AI Compliance Platform"
        }
    
    def generate_pdf(self, policy_content: Dict[str, Any], branding: Optional[PartnerBranding] = None) -> bytes:
        """Generate a PDF with partner branding"""
        
        # Use partner branding or defaults
        brand = branding.dict() if branding else self.default_branding
        
        # Build HTML with branding
        html_content = f"""
        <!DOCTYPE html>
        <html>
        <head>
            <meta charset="UTF-8">
            <title>{policy_content.get('policy_type', 'AI Policy')}</title>
            <style>
                @page {{
                    margin: 2cm;
                    @bottom-center {{
                        content: "{brand.get('footer_text', '')}";
                        font-size: 10px;
                        color: #666;
                    }}
                }}
                
                body {{
                    font-family: Arial, sans-serif;
                    line-height: 1.6;
                    color: #333;
                }}
                
                .header {{
                    display: flex;
                    justify-content: space-between;
                    align-items: center;
                    margin-bottom: 40px;
                    padding-bottom: 20px;
                    border-bottom: 3px solid {brand.get('primary_color', '#1a365d')};
                }}
                
                .logo {{
                    max-height: 60px;
                }}
                
                h1 {{
                    color: {brand.get('primary_color', '#1a365d')};
                    margin: 0;
                }}
                
                h2 {{
                    color: {brand.get('secondary_color', '#2563eb')};
                    margin-top: 30px;
                }}
                
                .section {{
                    margin-bottom: 30px;
                }}
                
                .footer {{
                    margin-top: 60px;
                    padding-top: 20px;
                    border-top: 1px solid #ddd;
                    font-size: 12px;
                    color: #666;
                }}
                
                .contact-info {{
                    margin-top: 20px;
                    padding: 15px;
                    background-color: #f5f5f5;
                    border-radius: 5px;
                }}
                
                .powered-by {{
                    text-align: center;
                    margin-top: 30px;
                    font-size: 11px;
                    color: #999;
                }}
            </style>
        </head>
        <body>
            <div class="header">
                <div>
                    <h1>{policy_content.get('policy_type', 'AI Usage Policy')}</h1>
                    <p>Effective Date: {datetime.utcnow().strftime('%B %d, %Y')}</p>
                </div>
                {f'<img src="{brand.get("logo_url")}" alt="{brand.get("company_name")}" class="logo">' if brand.get('logo_url') else ''}
            </div>
            
            <div class="section">
                <h2>Overview</h2>
                <p>{policy_content.get('overview', '')}</p>
            </div>
            
            <div class="section">
                <h2>Purpose</h2>
                <p>{policy_content.get('purpose', '')}</p>
            </div>
            
            <div class="section">
                <h2>Scope</h2>
                <p>{policy_content.get('scope', '')}</p>
            </div>
            
            <div class="section">
                <h2>Guidelines</h2>
                <p>{policy_content.get('guidelines', '')}</p>
            </div>
            
            <div class="section">
                <h2>Compliance Requirements</h2>
                <p>{policy_content.get('compliance', '')}</p>
            </div>
            
            <div class="section">
                <h2>Data Privacy & Security</h2>
                <p>{policy_content.get('data_privacy', '')}</p>
            </div>
            
            <div class="footer">
                <div class="contact-info">
                    <h3>Contact Information</h3>
                    <p><strong>{brand.get('company_name', 'CompliGenie')}</strong></p>
                    {f'<p>Phone: {brand.get("contact_phone")}</p>' if brand.get('contact_phone') else ''}
                    {f'<p>Email: {brand.get("contact_email")}</p>' if brand.get('contact_email') else ''}
                    {f'<p>Website: {brand.get("contact_website")}</p>' if brand.get('contact_website') else ''}
                </div>
                
                {f'<div class="powered-by">{brand.get("powered_by_text")}</div>' if brand.get('powered_by_text') else ''}
                
                {f'<div class="powered-by">Platform powered by CompliGenie</div>' if brand.get('show_compligenie_branding', True) else ''}
            </div>
        </body>
        </html>
        """
        
        # Return as bytes (in production, use weasyprint or reportlab)
        return html_content.encode('utf-8')
    
    def generate_pdf_base64(self, policy_content: Dict[str, Any], branding: Optional[PartnerBranding] = None) -> str:
        """Generate PDF and return as base64 string"""
        pdf_bytes = self.generate_pdf(policy_content, branding)
        return base64.b64encode(pdf_bytes).decode('utf-8')